'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { Building, Users, FileText, DollarSign, PlusCircle, Filter } from 'lucide-react'

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Skeleton } from "@/components/ui/skeleton"

// Types for our data structures
type Property = {
  id: number
  name: string
  address: string
  rent_amount: number
  vacancy_status: string
}

type Tenant = {
  id: number
  name: string
  property_name: string
  lease_end: string
}

type Document = {
  id: number
  filename: string
  uploaded_at: string
}

export default function Dashboard() {
  const [properties, setProperties] = useState<Property[]>([])
  const [tenants, setTenants] = useState<Tenant[]>([])
  const [documents, setDocuments] = useState<Document[]>([])
  const [error, setError] = useState<string | null>(null)
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState('properties')
  const [filter, setFilter] = useState('all')

  useEffect(() => {
    const fetchData = async () => {
      try {
        const propertiesResponse = await fetch('/api/properties')
        const tenantsResponse = await fetch('/api/tenants')
        const documentsResponse = await fetch('/api/documents')

        if (!propertiesResponse.ok || !tenantsResponse.ok || !documentsResponse.ok) {
          throw new Error('Failed to fetch data')
        }

        const propertiesData = await propertiesResponse.json()
        const tenantsData = await tenantsResponse.json()
        const documentsData = await documentsResponse.json()

        setProperties(propertiesData)
        setTenants(tenantsData)
        setDocuments(documentsData)
      } catch (err) {
        setError('Failed to load dashboard data. Please try again later.')
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [])

  const filteredProperties = properties.filter(property => {
    if (filter === 'all') return true
    return property.vacancy_status.toLowerCase() === filter
  })

  const renderSkeleton = () => (
    <div className="grid gap-4">
      {[1, 2, 3].map((i) => (
        <Card key={i}>
          <CardHeader>
            <Skeleton className="h-4 w-[250px]" />
            <Skeleton className="h-4 w-[200px]" />
          </CardHeader>
          <CardContent>
            <Skeleton className="h-4 w-[150px]" />
            <Skeleton className="h-4 w-[100px] mt-2" />
          </CardContent>
        </Card>
      ))}
    </div>
  )

  return (
    <div className="container mx-auto px-4 py-8 transition-all duration-300 ease-in-out">
      <h1 className="text-4xl font-bold mb-8 text-primary">Property Management Dashboard</h1>

      {error && (
        <Alert variant="destructive" className="mb-6">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <Card className="bg-gradient-to-br from-primary to-primary-foreground text-primary-foreground transition-all duration-300 hover:shadow-lg">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-lg font-medium">Total Properties</CardTitle>
            <Building className="h-5 w-5" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">{properties.length}</div>
            <p className="text-xs opacity-80 mt-1">Across all locations</p>
          </CardContent>
        </Card>
        <Card className="transition-all duration-300 hover:shadow-lg">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-lg font-medium">Total Tenants</CardTitle>
            <Users className="h-5 w-5 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">{tenants.length}</div>
            <p className="text-xs text-muted-foreground mt-1">Active leases</p>
          </CardContent>
        </Card>
        <Card className="transition-all duration-300 hover:shadow-lg">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-lg font-medium">Documents</CardTitle>
            <FileText className="h-5 w-5 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">{documents.length}</div>
            <p className="text-xs text-muted-foreground mt-1">Total uploaded</p>
          </CardContent>
        </Card>
        <Card className="bg-gradient-to-br from-secondary to-secondary-foreground text-secondary-foreground transition-all duration-300 hover:shadow-lg">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-lg font-medium">Total Rent</CardTitle>
            <DollarSign className="h-5 w-5" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">
              ${properties.reduce((sum, property) => sum + property.rent_amount, 0).toFixed(2)}
            </div>
            <p className="text-xs opacity-80 mt-1">Monthly income</p>
          </CardContent>
        </Card>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <div className="flex justify-between items-center">
          <TabsList>
            <TabsTrigger value="properties" className="transition-all duration-300">Properties</TabsTrigger>
            <TabsTrigger value="tenants" className="transition-all duration-300">Tenants</TabsTrigger>
            <TabsTrigger value="documents" className="transition-all duration-300">Documents</TabsTrigger>
          </TabsList>
          {activeTab === 'properties' && (
            <Select value={filter} onValueChange={setFilter}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter properties" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Properties</SelectItem>
                <SelectItem value="occupied">Occupied</SelectItem>
                <SelectItem value="vacant">Vacant</SelectItem>
              </SelectContent>
            </Select>
          )}
        </div>
        <TabsContent value="properties" className="space-y-4">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-bold">Properties</h2>
            <Link href="/add-property">
              <Button>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Property
              </Button>
            </Link>
          </div>
          {loading ? renderSkeleton() : (
            <div className="grid gap-4">
              {filteredProperties.map((property) => (
                <Card key={property.id} className="transition-all duration-300 hover:shadow-lg">
                  <CardHeader>
                    <CardTitle>{property.name}</CardTitle>
                    <CardDescription>{property.address}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <p className="font-semibold">Rent: ${property.rent_amount}</p>
                    <p className={`mt-2 inline-block px-2 py-1 rounded-full text-xs ${
                      property.vacancy_status === 'Occupied' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                    }`}>
                      {property.vacancy_status}
                    </p>
                    <Link href={`/property/${property.id}`}>
                      <Button variant="outline" className="mt-4 w-full transition-all duration-300 hover:bg-primary hover:text-primary-foreground">View Details</Button>
                    </Link>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </TabsContent>
        <TabsContent value="tenants" className="space-y-4">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-bold">Tenants</h2>
            <Link href="/add-tenant">
              <Button>
                <PlusCircle className="mr-2 h-4 w-4" /> Add Tenant
              </Button>
            </Link>
          </div>
          {loading ? renderSkeleton() : (
            <div className="grid gap-4">
              {tenants.map((tenant) => (
                <Card key={tenant.id} className="transition-all duration-300 hover:shadow-lg">
                  <CardHeader>
                    <CardTitle>{tenant.name}</CardTitle>
                    <CardDescription>{tenant.property_name}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <p className="font-semibold">Lease Ends: {tenant.lease_end}</p>
                    <Link href={`/tenant/${tenant.id}`}>
                      <Button variant="outline" className="mt-4 w-full transition-all duration-300 hover:bg-primary hover:text-primary-foreground">View Details</Button>
                    </Link>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </TabsContent>
        <TabsContent value="documents" className="space-y-4">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-bold">Documents</h2>
            <Link href="/upload-document">
              <Button>
                <PlusCircle className="mr-2 h-4 w-4" /> Upload Document
              </Button>
            </Link>
          </div>
          {loading ? renderSkeleton() : (
            <div className="grid gap-4">
              {documents.map((document) => (
                <Card key={document.id} className="transition-all duration-300 hover:shadow-lg">
                  <CardHeader>
                    <CardTitle>{document.filename}</CardTitle>
                    <CardDescription>Uploaded: {document.uploaded_at}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Link href={`/document/${document.id}`}>
                      <Button variant="outline" className="w-full transition-all duration-300 hover:bg-primary hover:text-primary-foreground">View Document</Button>
                    </Link>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </TabsContent>
      </Tabs>
    </div>
  )
}